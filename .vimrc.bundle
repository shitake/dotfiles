filetype off

if has('vim_starting')
  set runtimepath+=~/dotfiles/vimfiles/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/dotfiles/vimfiles/bundle'))

" manage
NeoBundleFetch 'Shougo/neobundle.vim'


" ------------------------------
" 以下plugin一覧
" ------------------------------

" luaが有効ならneocompleteを使う
NeoBundle has('lua') ? 'Shougo/neocomplete' : 'Shougo/neocomplcache'

NeoBundle 'Shougo/unite.vim'

NeoBundle 'Shougo/unite-outline'

NeoBundle 'Shougo/neosnippet.vim'

NeoBundle 'Shougo/neosnippet-snippets'

NeoBundle 'kana/vim-smartinput'

NeoBundle 'kana/vim-operator-user'

NeoBundle 'kana/vim-textobj-user'

NeoBundle 'scrooloose/nerdtree'

NeoBundle 'szw/vim-tags'

NeoBundle 'haya14busa/vim-easymotion'

" NeoBundle 'Lokaltog/vim-powerline'

NeoBundle 'itchyny/lightline.vim'

NeoBundle 'thinca/vim-quickrun'


NeoBundle 'davidhalter/jedi-vim'

NeoBundle 'hynek/vim-python-pep8-indent'

NeoBundle 'andviro/flake8-vim'

NeoBundle 'mattn/emmet-vim'

NeoBundle 'plasticboy/vim-markdown'

NeoBundle 'kannokanno/previm'

NeoBundle 'tyru/open-browser.vim'

NeoBundle 'tpope/vim-fugitive'

NeoBundle 'marcus/rsense'

NeoBundle 'scrooloose/syntastic'

NeoBundle 'tpope/vim-endwise'

NeoBundle 'kchmck/vim-coffee-script'

NeoBundleLazy 'lambdalisue/vim-django-support', {
      \ 'autoload': {
      \   'filetypes': ['python', 'python3']
      \ }}

NeoBundleLazy 'lambdalisue/vim-pyenv', {
      \ 'depends': ['davidhalter/jedi-vim'],
      \ 'autoload': {
      \   'filetypes': ['python',  'python3'],
      \ }}

NeoBundleCheck

" ------------------------------
" jedi-vim
" ------------------------------
autocmd FileType python setlocal omnifunc=jedi#completions

let g:jedi#auto_vim_configuration = 0

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

" ------------------------------
" vim-pyenv
" ------------------------------
" if jedi#init_python()
"   function! s:jedi_auto_force_py_version() abort
"     let major_version = pyenv#python#get_internal_major_version()
"     call jedi#force_py_version(major_version)
"   endfunction
"   augroup vim-pyenv-custom-augroup
"     autocmd! *
"     autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
"     autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
"   augroup END
" endif

" ------------------------------
" syntastic
" ------------------------------
let g:syntastic_python_checkers = ["flake8"]

" ------------------------------
" neocomplete.vim
" ------------------------------
let g:acp_enableAtStartup = 0

if neobundle#is_installed('neocomplete')
    " neocomplete用設定
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
      let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'
    endif
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'
elseif neobundle#is_installed('neocomplcache')
    " neocomplcache用設定
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_ignore_case = 1
    let g:neocomplcache_enable_smart_case = 1
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns._ = '\h\w*'
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_underbar_completion = 1
endif
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"


call neobundle#end()

filetype plugin indent on
syntax on
