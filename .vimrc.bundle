filetype off

"NeoBundle Scripts-----------------------------
if &compatible
    set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'flazz/vim-colorschemes'

" You can specify revision/branch/tag.
NeoBundle 'Shougo/vimshell',  { 'rev' : '3787e5' }

" ------------------------------
" 以下plugin一覧
" ------------------------------

" luaが有効ならneocompleteを使う
NeoBundle has('lua') ? 'Shougo/neocomplete' : 'Shougo/neocomplcache'

NeoBundle 'Shougo/unite.vim'

NeoBundle 'Shougo/unite-outline'

NeoBundle 'Shougo/neosnippet.vim'

NeoBundle 'Shougo/neosnippet-snippets'

NeoBundle 'kana/vim-smartinput'

NeoBundle 'kana/vim-operator-user'

NeoBundle 'kana/vim-textobj-user'

NeoBundle 'scrooloose/nerdtree'

NeoBundle 'szw/vim-tags'

NeoBundle 'haya14busa/vim-easymotion'

" NeoBundle 'Lokaltog/vim-powerline'

NeoBundle 'itchyny/lightline.vim'

NeoBundle 'thinca/vim-quickrun'


NeoBundle 'davidhalter/jedi-vim'

NeoBundle 'hynek/vim-python-pep8-indent'

NeoBundle 'andviro/flake8-vim'

NeoBundle 'mattn/emmet-vim'

NeoBundle 'plasticboy/vim-markdown'

NeoBundle 'kannokanno/previm'

NeoBundle 'tyru/open-browser.vim'

NeoBundle 'tpope/vim-fugitive'

NeoBundle 'marcus/rsense'

NeoBundle 'scrooloose/syntastic'

NeoBundle 'tpope/vim-endwise'

NeoBundle 'kchmck/vim-coffee-script'

NeoBundleLazy 'lambdalisue/vim-django-support', {
      \ 'autoload': {
      \   'filetypes': ['python', 'python3']
      \ }}

NeoBundleCheck

" ------------------------------
" jedi-vim
" ------------------------------
autocmd FileType python setlocal omnifunc=jedi#completions

let g:jedi#auto_vim_configuration = 0

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

" docstring を非表示
autocmd FileType python setlocal completeopt-=preview

" ------------------------------
" syntastic
" ------------------------------
let g:syntastic_python_checkers = ["flake8"]

" ------------------------------
" neocomplete.vim
" ------------------------------
let g:acp_enableAtStartup = 0

if neobundle#is_installed('neocomplete')
    " neocomplete用設定
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
      let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'
    endif
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'
elseif neobundle#is_installed('neocomplcache')
    " neocomplcache用設定
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_ignore_case = 1
    let g:neocomplcache_enable_smart_case = 1
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns._ = '\h\w*'
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_underbar_completion = 1
endif
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

syntax on
