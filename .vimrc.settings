if &compatible
 set nocompatible
endif
" Add the dein installation directory into runtimepath
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

let s:dein_dir = expand('~/.cache/dein')

if dein#load_state(s:dein_dir)
 call dein#begin(s:dein_dir)

 call dein#add(s:dein_dir)
 call dein#add('Shougo/deoplete.nvim')
 if !has('nvim')
   call dein#add('roxma/nvim-yarp')
   call dein#add('roxma/vim-hug-neovim-rpc')
 endif

 let s:toml = './dein.toml'
 call dein#load_toml(s:toml, {'lazy': 0})

 call dein#end()
 call dein#save_state()
endif

filetype plugin indent on
syntax enable

if dein#check_install()
  call dein#install()
endif

set runtimepath^=~/dotfiles/vimfiles

if executable("pyenv")
  let $PATH = "~/.pyenv/shims:".$PATH
  let $PATH = system("pyenv root")[:-2]."/shims:".$PATH
endif

set clipboard=unnamed                               " クリップボード使用
set whichwrap=b,s,h,l,<,>,[,]                       " カーソルが行頭，行末で止まらないようにする
set showcmd                                         " コマンドをステータス行に表示
set showmode                                        " 現在のモード表示
set number                                          " 行番号
set noswapfile                                      " スワップファイルを作らない
set nobackup                                        " バックアップファイル作らん
set noundofile                                      " undoファイルを作らぬ
set list                                            " 不可視文字を表示
set listchars=tab:>.,trail:_,extends:>,precedes:<   " 不可視文字の表示形式
set display=uhex                                    " 印字不可能文字を16進数で表示
set autoread                                        " 余所の更新を自動で更新
set formatoptions=lmoq                              " テキスト整形オプション，マルチバイト系を追加
set clipboard+=unnamed                              " OSのクリップボードを使う
set ffs=unix,dos,mac                                " 改行文字
set encoding=utf-8                                  " デフォルトエンコーディング
set scrolloff=5                                     " スクロール時の余白確保
set ignorecase                                      " 大文字小文字無視
set smartcase                                       " 検索文字列に大文字が含まれている場合は区別
set incsearch                                       " インクリメンタルサーチ
set backspace=indent,eol,start                      " 文字削除可

" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" ESC2回でハイライト消す
nmap <ESC><ESC> :nohlsearch<CR><ESC>

" ESCを別のキーへ割り当て
inoremap <silent> jj <ESC>
inoremap <C-j> <ESC>
noremap <C-j> <ESC>
vnoremap <C-j> <ESC>

" 行末の空白文字をハイライト
augroup HighlightTrailingSpaces
  autocmd!
  autocmd VimEnter, WinEnter, ColorScheme * highlight TrailingSpaces term=underline guibg~Red ctermbg=Red
  autocmd VimEnter, WinEnter * match TrailingSpacese /\s\+$/
augroup END

" ,の後にスペース挿入
inoremap , ,<Space>

" 保存時に行末の空白を削除
autocmd BufWritePre * :%s/\s\+$//ge

" 複数行のインデントを連続で実行
vnoremap <silent> > >gv
vnoremap <silent> < <gv

" ターミナルでマウス使用可
set mouse=a
set guioptions+=a
set ttymouse=xterm2

" prefix key
nnoremap [Tag] <Nop>
nmap t [Tag]

" タブ切り替え
nnoremap <silent> [Tag]c :tablast <bar> tabnew<CR>  " tc で新しいタブを一番右へ作成
nnoremap <silent> [Tag]n :tabnext<CR>               " tn 次のタブへ
nnoremap <silent> [Tag]p :tabprevious<CR>           " tp 前のタブへ

" 画面移動
nnoremap <silent> [Tag]h <C-w>h
nnoremap <silent> [Tag]j <C-w>j
nnoremap <silent> [Tag]k <C-w>k
nnoremap <silent> [Tag]l <C-w>l

" ctags
" nnoremap [Tag]] :exe("tjump ".expand('<cword>'))<CR>  " タグジャンプ
nnoremap [Tag]] :tag<CR>                              " tag stack を進む
nnoremap [Tag][ :pop<CR>                              " tag stack を戻る
nnoremap [Tag]s :ts<CR>                               " tag list を表示

" コメントの自動挿入を無効
augroup auto_comment_off
    autocmd!
    autocmd BufEnter * setlocal formatoptions-=r
    autocmd BufEnter * setlocal formatoptions-=o
augroup END

" ---------- インデント ----------
set autoindent
set smartindent  " 新しい行開始時に，現在と同じだけインデント
set cindent  " 行頭に#を付けた際にインデントが無くなる場合がある

" Shift-Tab で unindent
inoremap <S-Tab> <C-o><<

" softtabstopはTabキー押し下げ時に挿入される空白の量，0の場合はtabstopと同じ
set tabstop=4 shiftwidth=4 softtabstop=0  "ts, sw, stsで代用可

if has("autocmd")
    filetype plugin on  " ファイルタイプの検索を有効化
    filetype indent on  " ファイルタイプごとのインデント

    autocmd FileType python     setlocal sw=4 sts=4 ts=4 et  " sts=0 から 4にした
    autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType css        setlocal sw=2 sts=2 ts=2 et
    autocmd FileType scss       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType javascript setlocal sw=2 sts=2 ts=2 et
    autocmd FileType ruby       setlocal sw=2 sts=2 ts=2 et
    autocmd FileType eruby      setlocal sw=2 sts=2 ts=2 et
    autocmd FileType coffee     setlocal sw=2 sts=2 ts=2 et
    autocmd FileType sh         setlocal sw=2 sts=2 ts=2 et
endif

" set noexpandtab  " ソフトTab(タブの代わりにスペースを入れる)をOFFにする
set expandtab

" ---------- 移動とか ----------
nnoremap j gj
nnoremap k gk

" ---------- ステータスライン ----------
set laststatus=2  " 常時ステータスライン表示
set ruler  " カーソルの位置情報表示

" 高速端末
set ttyfast

" コマンド実行中は描画を中断
set lazyredraw

filetype off

" ------------------------------
" easy-motion
" ------------------------------
" ジャンプ用キー変更
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmvcxzbHJKLASDFGYUIOPQWERTNMVCXZB'
" <Leader>を ; に割当
" let g:EasyMotion_leader_key=';'
" smartcase 大文字小文字無視
let g:EasyMotion_smartcase=1
" 双方向検索 <Leader>なしでs使えるようにした
nmap s <Plug>(easymotion-s)
vmap s <Plug>(easymotion-s)
omap s <Plug>(easymotion-s)
" JK Motionの変更 先頭列ではなくカレント列
let g:EasyMotion_startofline=0

" ------------------------------
" lightline.vim
" ------------------------------
let g:lightline = {
            \ 'colorscheme': 'solarized',
            \ 'mode_map': {'c': 'NORMAL'},
            \ 'active': {
            \   'left': [
            \     ['mode', 'paste'],
            \     ['pyenv'],
            \     ['fugitive', 'gitgutter', 'filename'],
            \   ],
            \   'right': [
            \     ['lineinfo', 'syntastic'],
            \     ['percent'],
            \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
            \   ]
            \ },
            \ 'component_function': {
            \   'modified': 'MyModified',
            \   'readonly': 'MyReadonly',
            \   'fugitive': 'MyFugitive',
            \   'filename': 'MyFilename',
            \   'fileformat': 'MyFileformat',
            \   'filetype': 'MyFiletype',
            \   'fileencoding': 'MyFileencoding',
            \   'mode': 'MyMode',
            \   'syntastic': 'SyntasticStatuslineFlag',
            \   'charcode': 'MyCharCode',
            \   'gitgutter': 'MyGitGutter',
            \   'pyenv': 'pyenv#statusline#component',
            \ },
            \ 'separator': {'left': "\u2b80", 'right': "\u2b82"},
            \ 'subseparator': {'left': "\u2b81", 'right': "\u2b83"}
            \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '>' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" ------------------------------
" vim-tags
" ------------------------------
let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = "/usr/local/bin/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"

" ------------------------------
" previm
" ------------------------------
augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
    let g:rsenseHome = '/usr/local/lib/rsense-0.3'
    let g:rsenseUseOmniFunc = 1
augroup END

" ------------------------------
" vim-coffee-script
" ------------------------------
autocmd BufRead, BufNewFile, BufReadPre *.coffee set filetype=coffee
autocmd BufWritePost *.coffee silent make!
nnoremap <silent> <C-C> :CoffeeCompile vert <CR><C-w>h

" ------------------------------
" NERDTree
" ------------------------------
nnoremap [SideBar] <Nop>
nmap <C-b> [SideBar]
nnoremap [SideBar]k :NERDTreeToggle<CR>
nnoremap [SideBar]<C-k> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1  " 隠しファイル表示

filetype plugin on  " ファイルタイプ判定on
